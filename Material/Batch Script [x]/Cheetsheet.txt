// 1. Basic Commands /////////////////////////////////////////
REM:   add comments 
    REM Yourcomment

echo:  Display a message or []
    echo hello_World!

PAUSE: Pause the script and wait for the user to hit a key
    PAUSE

// 2. Redirection & Piping ///////////////////////////////////

'>' : Redirect output to a file
    command > filename

'>>': Append output to a file
    command >> filename

'<': Take input from a file 
    command < filenames 

'|': Pipe the Output of one command as input to another
    command1 | command2

// 3. Variables ///////////////////////////////////

set a variable named userName 
    set username=ahmed

access a variable 
    echo %username%

// 4. Conditional Statements /////////////////////

Notice: spaces are sensitive
IF condition (
    commands1
)   ELSE (
    commands2
)

// 5. Looping ////////////////////////////////////
Looping through Numbers 
    for /L %%parameters IN (start, step, end) do (
        command1
        command2
        ...etc
    )

Looping through Files                       REM 126
FOR %%parameter IN (set) DO command

// 6. Functions and Call ///////////////////////////
Define a function
    :function_name
    command1   
    command2    
    command3 
    EXIT /B

Call a function
    CALL :function_name

// 7. Exit a Script ////////////////////////////////
> Exit the script
    EXIT

> Exit script or function
    EXIT /B

// 8. Command-Line Arguments ///////////////////////
%%0 - The name of the Batch script
%%1 - The first command-line argument
%%2 - The second command-line argument

// 9. Miscellaneous ///////////////////////////////

> Start a program or command
    Start program_name 

> Wait for a specific amount of time 
    Timeout /T seconds

// 10. Error Handling //////////////////////////////

Every command, when executed, returns an exit code,
usually '0' if it was successful and a number other
than '0' if there was an error.


syntax: IF ERRORLEVEL number command

ERRORLEVEL - system variable in batch scripts that stores
the exit code of the last executed command.

:: example ::
REM (fake_command is not a valid command)
fake_command
IF ERRORLEVEL 1 ECHO An error occurred.
IF NOT ERRORLEVEL 1 ECHO Success


// 11. Echo Off & Echo On /////////////////////////
> @echo On
useful when debugging to see each command being executed.

> @echo off
For cleaner output, hiding the commands being executed.
